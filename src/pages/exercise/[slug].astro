---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import type { Exercise } from "../../customTypes";
import { EFFORT_LEVEL } from "../../customTypes";
import DumbBell from "../../assets/svg/dumbell.svg?raw";
import Arrow from "../../assets/svg/arrow.svg?raw";

export async function getStaticPaths() {
  const excersise = await getCollection("exercise");

  return excersise.map((entry: Exercise) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const {slug} = Astro.params;
const allImages = await Astro.glob('../../assets/images/exercise/*/*.jpg');
const images = allImages.filter(image => image.default.src.includes(slug));

const { entry } = Astro.props;
const {name, mechanic, instructions, level, primaryMuscles, secondaryMuscles} = entry.data;

const effortLevel = {
  effortLevelColor: EFFORT_LEVEL[level].color,
  effortLevelEmoji: EFFORT_LEVEL[level].emoji
}
---

<Layout title={name}>
  <section>
    <div class="pictures basis-2/5">
      {
        images.map((image, index) => {
          return (
            <Image
              loading="eager"
              src={image.default}
              alt=`${name} ${index === 0 ? 'Starting': 'Finishing'} Position`
            />
          );
        })
      }
    </div>
    <div class="flex flex-col flex-1 gap-6">
      <div class="flex items-start gap-4">
        <div class="flex flex-col">
          <h1>
            {name}
          </h1>
          <p class="self-start p-1 px-2 text-base text-white uppercase rounded-md effort-level">{level} {effortLevel.effortLevelEmoji}</p>
        </div>
        <button class="relative inline-flex items-center justify-center px-6 ml-auto overflow-hidden font-medium rounded-md group bg-neutral-950 h-11 text-neutral-200">
          <span>Add To Workout</span>
          <div class="w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-1 group-hover:opacity-100">
            ðŸ’ª
          </div>
       </button>
      </div>
      <div class="flex flex-col gap-2">
        <h2 class="flex items-center gap-2">
          Primary <Fragment set:html={DumbBell} /> {primaryMuscles.map((item: string) => <p class="pill">{item}</p>)}
        </h2>
        {secondaryMuscles.length > 0 && (
          <h3 class="flex gap-2">
            Secondary <Fragment set:html={DumbBell} /> {secondaryMuscles.map((item: string) => <p class="pill secondary">{item}</p>)}
          </h3>
        )}
        
        {mechanic && (
          <h4 class="flex gap-2">
            Mechanic ðŸ›  <p class="pill tertiary"> {mechanic}</p>
          </h4>
        )}
        
        </div>
      <div>
        <h5 class="font-semibold">Instructions:</h5>
        {instructions.map((line: string) => <p class="pb-3 text-sm">{line}</p>)}

        <a href="/" class="relative inline-flex items-center justify-center px-6 mt-8 ml-auto overflow-hidden font-medium rounded-md h-11 group bg-neutral-950 text-neutral-200">
          <div class="w-0 translate-x-[-100%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pr-1 group-hover:opacity-100">
            <Fragment set:html={Arrow} />
          </div>
          <span>Back to Exercises</span>
       </a>
      </div>
    </div>
    
  </section>
</Layout>

<style define:vars={{ ...effortLevel }}>
  section {
    @apply flex flex-row gap-12 relative;
    h1 {
      @apply text-4xl;
    }
    
    .effort-level {
      background-color: var(--effortLevelColor);
    }
    
    .pill {
      @apply p-1 px-2 text-xs text-white uppercase rounded-md bg-slate-600 self-center;
      
      &.secondary {
        @apply bg-slate-400;
      }
      
      &.tertiary {
        @apply bg-blue-400;
      }
    }

    .pictures {
      img {
        @apply relative z-10 border-2 p-2 rounded-md;
        animation-name: fade;
        animation-iteration-count: infinite;
        animation-duration: 4s;
      }
      img:nth-of-type(2) {
        @apply -translate-y-full z-auto;
        animation-delay: -2s;
      }
    }
  }
</style>
